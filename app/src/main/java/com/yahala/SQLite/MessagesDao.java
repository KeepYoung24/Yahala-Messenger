package com.yahala.SQLite;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table MESSAGES.
 */
public class MessagesDao extends AbstractDao<Messages, Long> {

    public static final String TABLENAME = "MESSAGES";

    public MessagesDao(DaoConfig config) {
        super(config);
    }

    ;


    public MessagesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'MESSAGES' (" + //
                "'mid' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'JID' TEXT," + // 1: jid
                "'MESSAGE' TEXT," + // 2: message
                "'READ_STATE' INTEGER," + // 3: read_state
                "'SEND_STATE' INTEGER," + // 4: send_state
                "'DATE' INTEGER," + // 5: date
                "'OUT' INTEGER," + // 6: out
                "'TYPE' INTEGER," + // 7: type
                "'TTL' INTEGER," + // 8: ttl
                "'DATA' BLOB);"); // 9: data
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MESSAGES'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, Messages entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String jid = entity.getJid();
        if (jid != null) {
            stmt.bindString(2, jid);
        }

        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(3, message);
        }

        Integer read_state = entity.getRead_state();
        if (read_state != null) {
            stmt.bindLong(4, read_state);
        }

        Integer send_state = entity.getSend_state();
        if (send_state != null) {
            stmt.bindLong(5, send_state);
        }

        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(6, date.getTime());
        }

        Integer out = entity.getOut();
        if (out != null) {
            stmt.bindLong(7, out);
        }

        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(8, type);
        }

        Integer ttl = entity.getTtl();
        if (ttl != null) {
            stmt.bindLong(9, ttl);
        }

        byte[] data = entity.getData();
        if (data != null) {
            stmt.bindBlob(10, data);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public Messages readEntity(Cursor cursor, int offset) {
        Messages entity = new Messages( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // jid
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // message
                cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // read_state
                cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // send_state
                cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // date
                cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // out
                cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // type
                cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // ttl
                cursor.isNull(offset + 9) ? null : cursor.getBlob(offset + 9) // data
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, Messages entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setJid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMessage(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRead_state(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setSend_state(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setDate(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setOut(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setType(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setTtl(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setData(cursor.isNull(offset + 9) ? null : cursor.getBlob(offset + 9));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(Messages entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(Messages entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity Messages.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "mid");
        public final static Property Jid = new Property(1, String.class, "jid", false, "JID");
        public final static Property Message = new Property(2, String.class, "message", false, "MESSAGE");
        public final static Property Read_state = new Property(3, Integer.class, "read_state", false, "READ_STATE");
        public final static Property Send_state = new Property(4, Integer.class, "send_state", false, "SEND_STATE");
        public final static Property Date = new Property(5, java.util.Date.class, "date", false, "DATE");
        public final static Property Out = new Property(6, Integer.class, "out", false, "OUT");
        public final static Property Type = new Property(7, Integer.class, "type", false, "TYPE");
        public final static Property Ttl = new Property(8, Integer.class, "ttl", false, "TTL");
        public final static Property Data = new Property(9, byte[].class, "data", false, "DATA");
    }

}
