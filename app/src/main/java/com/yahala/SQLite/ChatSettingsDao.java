package com.yahala.SQLite;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.yahala.SQLite.ChatSettings;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table CHAT_SETTINGS.
 */
public class ChatSettingsDao extends AbstractDao<ChatSettings, Void> {

    public static final String TABLENAME = "CHAT_SETTINGS";

    /**
     * Properties of entity ChatSettings.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Jid = new Property(0, String.class, "jid", false, "JID");
        public final static Property Participants = new Property(1, byte[].class, "participants", false, "PARTICIPANTS");
    }

    ;


    public ChatSettingsDao(DaoConfig config) {
        super(config);
    }

    public ChatSettingsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'CHAT_SETTINGS' (" + //
                "'JID' TEXT," + // 0: jid
                "'PARTICIPANTS' BLOB);"); // 1: participants
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CHAT_SETTINGS'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, ChatSettings entity) {
        stmt.clearBindings();

        String jid = entity.getJid();
        if (jid != null) {
            stmt.bindString(1, jid);
        }

        byte[] participants = entity.getParticipants();
        if (participants != null) {
            stmt.bindBlob(2, participants);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    public ChatSettings readEntity(Cursor cursor, int offset) {
        ChatSettings entity = new ChatSettings( //
                cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // jid
                cursor.isNull(offset + 1) ? null : cursor.getBlob(offset + 1) // participants
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, ChatSettings entity, int offset) {
        entity.setJid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setParticipants(cursor.isNull(offset + 1) ? null : cursor.getBlob(offset + 1));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Void updateKeyAfterInsert(ChatSettings entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Void getKey(ChatSettings entity) {
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
